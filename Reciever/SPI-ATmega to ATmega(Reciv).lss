
SPI-ATmega to ATmega(Reciv).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000002f8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000833  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020e  00000000  00000000  00000c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030a  00000000  00000000  00000e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027f  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000046c  00000000  00000000  00001527  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001993  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  8a:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pins_init>:
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
		thousand = temp%10 + 48;
  92:	1b ba       	out	0x1b, r1	; 27
  94:	1a ba       	out	0x1a, r1	; 26
  96:	18 ba       	out	0x18, r1	; 24
  98:	80 e4       	ldi	r24, 0x40	; 64
  9a:	87 bb       	out	0x17, r24	; 23
  9c:	15 ba       	out	0x15, r1	; 21
  9e:	9f ef       	ldi	r25, 0xFF	; 255
  a0:	94 bb       	out	0x14, r25	; 20
  a2:	12 ba       	out	0x12, r1	; 18
  a4:	97 ec       	ldi	r25, 0xC7	; 199
  a6:	91 bb       	out	0x11, r25	; 17
  a8:	13 be       	out	0x33, r1	; 51
  aa:	12 be       	out	0x32, r1	; 50
  ac:	1c be       	out	0x3c, r1	; 60
  ae:	1f bc       	out	0x2f, r1	; 47
  b0:	1e bc       	out	0x2e, r1	; 46
  b2:	1d bc       	out	0x2d, r1	; 45
  b4:	1c bc       	out	0x2c, r1	; 44
  b6:	17 bc       	out	0x27, r1	; 39
  b8:	16 bc       	out	0x26, r1	; 38
  ba:	1b bc       	out	0x2b, r1	; 43
  bc:	1a bc       	out	0x2a, r1	; 42
  be:	19 bc       	out	0x29, r1	; 41
  c0:	18 bc       	out	0x28, r1	; 40
  c2:	12 bc       	out	0x22, r1	; 34
  c4:	15 bc       	out	0x25, r1	; 37
  c6:	14 bc       	out	0x24, r1	; 36
		lcd_wr_char(thousand);
  c8:	13 bc       	out	0x23, r1	; 35
  ca:	15 be       	out	0x35, r1	; 53
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
  cc:	14 be       	out	0x34, r1	; 52
  ce:	19 be       	out	0x39, r1	; 57
  d0:	1a b8       	out	0x0a, r1	; 10
  d2:	90 e8       	ldi	r25, 0x80	; 128
  d4:	98 b9       	out	0x08, r25	; 8
  d6:	10 be       	out	0x30, r1	; 48
  d8:	16 b8       	out	0x06, r1	; 6
  da:	8d b9       	out	0x0d, r24	; 13
  dc:	1e b8       	out	0x0e, r1	; 14
  de:	16 be       	out	0x36, r1	; 54
  e0:	08 95       	ret

000000e2 <lcd_set_4bit>:
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_set_4bit+0x4>
  ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_set_4bit+0xa>
		hundred = temp%10 + 48;
  ec:	00 00       	nop
  ee:	90 98       	cbi	0x12, 0	; 18
  f0:	80 e3       	ldi	r24, 0x30	; 48
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	91 9a       	sbi	0x12, 1	; 18
  f6:	e1 ee       	ldi	r30, 0xE1	; 225
  f8:	f4 e0       	ldi	r31, 0x04	; 4
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_set_4bit+0x18>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_set_4bit+0x1e>
 100:	00 00       	nop
 102:	91 98       	cbi	0x12, 1	; 18
 104:	e9 ef       	ldi	r30, 0xF9	; 249
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_set_4bit+0x26>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_set_4bit+0x2c>
 10e:	00 00       	nop
 110:	90 98       	cbi	0x12, 0	; 18
 112:	82 bb       	out	0x12, r24	; 18
 114:	91 9a       	sbi	0x12, 1	; 18
 116:	e1 ee       	ldi	r30, 0xE1	; 225
 118:	f4 e0       	ldi	r31, 0x04	; 4
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_set_4bit+0x38>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_set_4bit+0x3e>
 120:	00 00       	nop
 122:	91 98       	cbi	0x12, 1	; 18
 124:	e9 ef       	ldi	r30, 0xF9	; 249
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	31 97       	sbiw	r30, 0x01	; 1
		lcd_wr_char(hundred);
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_set_4bit+0x46>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_set_4bit+0x4c>
 12e:	00 00       	nop
		flag=1;
	}
	if(digits==2 || flag==1)
 130:	90 98       	cbi	0x12, 0	; 18
 132:	82 bb       	out	0x12, r24	; 18
 134:	91 9a       	sbi	0x12, 1	; 18
 136:	81 ee       	ldi	r24, 0xE1	; 225
	{
		temp = value/10;
 138:	94 e0       	ldi	r25, 0x04	; 4
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_set_4bit+0x58>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_set_4bit+0x5e>
 140:	00 00       	nop
 142:	91 98       	cbi	0x12, 1	; 18
 144:	e9 ef       	ldi	r30, 0xF9	; 249
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_set_4bit+0x66>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_set_4bit+0x6c>
 14e:	00 00       	nop
 150:	90 98       	cbi	0x12, 0	; 18
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	82 bb       	out	0x12, r24	; 18
 156:	91 9a       	sbi	0x12, 1	; 18
		tens = temp%10 + 48;
 158:	81 ee       	ldi	r24, 0xE1	; 225
 15a:	94 e0       	ldi	r25, 0x04	; 4
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_set_4bit+0x7a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_set_4bit+0x80>
 162:	00 00       	nop
 164:	91 98       	cbi	0x12, 1	; 18
 166:	08 95       	ret

00000168 <lcd_wr_command>:
 168:	92 b3       	in	r25, 0x12	; 18
 16a:	9f 70       	andi	r25, 0x0F	; 15
 16c:	92 bb       	out	0x12, r25	; 18
 16e:	92 b3       	in	r25, 0x12	; 18
 170:	28 2f       	mov	r18, r24
 172:	20 7f       	andi	r18, 0xF0	; 240
 174:	92 2b       	or	r25, r18
 176:	92 bb       	out	0x12, r25	; 18
 178:	90 98       	cbi	0x12, 0	; 18
 17a:	91 9a       	sbi	0x12, 1	; 18
 17c:	e1 ee       	ldi	r30, 0xE1	; 225
 17e:	f4 e0       	ldi	r31, 0x04	; 4
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_wr_command+0x18>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_wr_command+0x1e>
 186:	00 00       	nop
 188:	91 98       	cbi	0x12, 1	; 18
 18a:	92 b3       	in	r25, 0x12	; 18
 18c:	9f 70       	andi	r25, 0x0F	; 15
 18e:	92 bb       	out	0x12, r25	; 18
 190:	92 b3       	in	r25, 0x12	; 18
		lcd_wr_char(tens);
 192:	82 95       	swap	r24
 194:	80 7f       	andi	r24, 0xF0	; 240
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
 196:	89 2b       	or	r24, r25
 198:	82 bb       	out	0x12, r24	; 18
 19a:	90 98       	cbi	0x12, 0	; 18
 19c:	91 9a       	sbi	0x12, 1	; 18
 19e:	81 ee       	ldi	r24, 0xE1	; 225
 1a0:	94 e0       	ldi	r25, 0x04	; 4
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_wr_command+0x3a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_wr_command+0x40>
 1a8:	00 00       	nop
 1aa:	91 98       	cbi	0x12, 1	; 18
 1ac:	08 95       	ret

000001ae <lcd_init>:
 1ae:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_set_4bit>
 1b2:	89 ef       	ldi	r24, 0xF9	; 249
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x8>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_init+0xe>
 1bc:	00 00       	nop
 1be:	88 e2       	ldi	r24, 0x28	; 40
 1c0:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_wr_command>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_wr_command>
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_wr_command>
 1d0:	8e e0       	ldi	r24, 0x0E	; 14
 1d2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_wr_command>
		lcd_wr_char(unit);
 1d6:	80 e8       	ldi	r24, 0x80	; 128
	}
	if(digits>5)
 1d8:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_wr_command>
	{
		lcd_wr_char('E');
 1dc:	08 95       	ret

000001de <lcd_wr_char>:
 1de:	92 b3       	in	r25, 0x12	; 18
 1e0:	9f 70       	andi	r25, 0x0F	; 15
 1e2:	92 bb       	out	0x12, r25	; 18
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 1e4:	92 b3       	in	r25, 0x12	; 18
 1e6:	28 2f       	mov	r18, r24
 1e8:	20 7f       	andi	r18, 0xF0	; 240
 1ea:	92 2b       	or	r25, r18
 1ec:	92 bb       	out	0x12, r25	; 18
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 1ee:	90 9a       	sbi	0x12, 0	; 18
 1f0:	91 9a       	sbi	0x12, 1	; 18
 1f2:	e1 ee       	ldi	r30, 0xE1	; 225
 1f4:	f4 e0       	ldi	r31, 0x04	; 4
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_wr_char+0x18>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_wr_char+0x1e>
 1fc:	00 00       	nop
 1fe:	91 98       	cbi	0x12, 1	; 18
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 200:	92 b3       	in	r25, 0x12	; 18
 202:	9f 70       	andi	r25, 0x0F	; 15
 204:	92 bb       	out	0x12, r25	; 18
	lcd_port |= letter;
 206:	92 b3       	in	r25, 0x12	; 18
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 208:	82 95       	swap	r24
 20a:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 20c:	89 2b       	or	r24, r25
 20e:	82 bb       	out	0x12, r24	; 18
	sbit(lcd_port,RS);
 210:	90 9a       	sbi	0x12, 0	; 18
	//cbit(lcd_port,RW);
	sbit(lcd_port,EN);
 212:	91 9a       	sbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	81 ee       	ldi	r24, 0xE1	; 225
 216:	94 e0       	ldi	r25, 0x04	; 4
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_wr_char+0x3a>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_wr_char+0x40>
 21e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 220:	91 98       	cbi	0x12, 1	; 18
 222:	08 95       	ret

00000224 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	71 f0       	breq	.+28     	; 0x244 <lcd_cursor+0x20>
 228:	18 f4       	brcc	.+6      	; 0x230 <lcd_cursor+0xc>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	31 f0       	breq	.+12     	; 0x23a <lcd_cursor+0x16>
 22e:	08 95       	ret
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	69 f0       	breq	.+26     	; 0x24e <lcd_cursor+0x2a>
 234:	84 30       	cpi	r24, 0x04	; 4
 236:	81 f0       	breq	.+32     	; 0x258 <lcd_cursor+0x34>
 238:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 23a:	8f e7       	ldi	r24, 0x7F	; 127
 23c:	86 0f       	add	r24, r22
 23e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_wr_command>
 242:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 244:	8f eb       	ldi	r24, 0xBF	; 191
 246:	86 0f       	add	r24, r22
 248:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_wr_command>
 24c:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 24e:	83 e9       	ldi	r24, 0x93	; 147
 250:	86 0f       	add	r24, r22
 252:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_wr_command>
 256:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 258:	83 ed       	ldi	r24, 0xD3	; 211
 25a:	86 0f       	add	r24, r22
 25c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_wr_command>
 260:	08 95       	ret

00000262 <spi_tranceiver>:


//Function to send and receive data
unsigned char spi_tranceiver (unsigned char data)
{
	SPDR = data;                       //Load data into the buffer
 262:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF) ));       //Wait until transmission complete
 264:	77 9b       	sbis	0x0e, 7	; 14
 266:	fe cf       	rjmp	.-4      	; 0x264 <spi_tranceiver+0x2>
	return(SPDR);                      //Return received data
 268:	8f b1       	in	r24, 0x0f	; 15
}
 26a:	08 95       	ret

0000026c <main>:


unsigned char spi_tranceiver(unsigned char );

int main(void)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	28 97       	sbiw	r28, 0x08	; 8
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
   pins_init();
 280:	0e 94 49 00 	call	0x92	; 0x92 <pins_init>
   lcd_init();
 284:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_init>
	uint8_t recieved_data;
    uint8_t transmitting_data;
	
	int j=1;
	
	uint8_t a[8]={'a','b','c','d','e','f','g','h'};
 288:	88 e0       	ldi	r24, 0x08	; 8
 28a:	e0 e6       	ldi	r30, 0x60	; 96
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	de 01       	movw	r26, r28
 290:	11 96       	adiw	r26, 0x01	; 1
 292:	01 90       	ld	r0, Z+
 294:	0d 92       	st	X+, r0
 296:	8a 95       	dec	r24
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x26>
	
	PORTC=0xFF;
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	85 bb       	out	0x15, r24	; 21


unsigned char spi_tranceiver(unsigned char );

int main(void)
{
 29e:	b1 2c       	mov	r11, r1
 2a0:	e1 2c       	mov	r14, r1
 2a2:	ce 01       	movw	r24, r28
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	6c 01       	movw	r12, r24
 2a8:	0b 2d       	mov	r16, r11
 2aa:	1e 2d       	mov	r17, r14
		for(int k=0;k<8;k++)
		{
		transmitting_data = a[k];
		
			
		recieved_data= spi_tranceiver(transmitting_data);
 2ac:	f6 01       	movw	r30, r12
 2ae:	81 91       	ld	r24, Z+
 2b0:	6f 01       	movw	r12, r30
 2b2:	0e 94 31 01 	call	0x262	; 0x262 <spi_tranceiver>
		
		PORTC = recieved_data;
 2b6:	85 bb       	out	0x15, r24	; 21
		
		
	//	for(int k=0 ; k<8; k++){
			if ((recieved_data&(1<<k))==0)
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	00 2e       	mov	r0, r16
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <main+0x56>
 2be:	95 95       	asr	r25
 2c0:	87 95       	ror	r24
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <main+0x52>
 2c6:	0f 5f       	subi	r16, 0xFF	; 255
 2c8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ca:	80 fd       	sbrc	r24, 0
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <main+0x72>
			{lcd_cursor(1,k+1);
 2ce:	60 2f       	mov	r22, r16
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 12 01 	call	0x224	; 0x224 <lcd_cursor>
				lcd_wr_char('0');
 2d6:	80 e3       	ldi	r24, 0x30	; 48
 2d8:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_wr_char>
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <main+0x80>
			}
			else
			{lcd_cursor(1,k+1);
 2de:	60 2f       	mov	r22, r16
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 12 01 	call	0x224	; 0x224 <lcd_cursor>
				lcd_wr_char('1');
 2e6:	81 e3       	ldi	r24, 0x31	; 49
 2e8:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_wr_char>
	
	PORTC=0xFF;
	
    while (1) 
    {
		for(int k=0;k<8;k++)
 2ec:	08 30       	cpi	r16, 0x08	; 8
 2ee:	11 05       	cpc	r17, r1
 2f0:	e9 f6       	brne	.-70     	; 0x2ac <main+0x40>
 2f2:	d7 cf       	rjmp	.-82     	; 0x2a2 <main+0x36>

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
