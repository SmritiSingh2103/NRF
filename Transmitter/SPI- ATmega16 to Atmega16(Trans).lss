
SPI- ATmega16 to Atmega16(Trans).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000841  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d8  00000000  00000000  00000c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000322  00000000  00000000  00000df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000276  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003fc  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  74:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <pins_init>:
		lcd_wr_char(million);
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
  7c:	1b ba       	out	0x1b, r1	; 27
  7e:	1a ba       	out	0x1a, r1	; 26
  80:	18 ba       	out	0x18, r1	; 24
  82:	80 eb       	ldi	r24, 0xB0	; 176
  84:	87 bb       	out	0x17, r24	; 23
  86:	15 ba       	out	0x15, r1	; 21
  88:	14 ba       	out	0x14, r1	; 20
		thousand = temp%10 + 48;
  8a:	12 ba       	out	0x12, r1	; 18
  8c:	87 ec       	ldi	r24, 0xC7	; 199
  8e:	81 bb       	out	0x11, r24	; 17
  90:	13 be       	out	0x33, r1	; 51
  92:	12 be       	out	0x32, r1	; 50
  94:	1c be       	out	0x3c, r1	; 60
  96:	1f bc       	out	0x2f, r1	; 47
  98:	1e bc       	out	0x2e, r1	; 46
  9a:	1d bc       	out	0x2d, r1	; 45
  9c:	1c bc       	out	0x2c, r1	; 44
  9e:	17 bc       	out	0x27, r1	; 39
  a0:	16 bc       	out	0x26, r1	; 38
  a2:	1b bc       	out	0x2b, r1	; 43
  a4:	1a bc       	out	0x2a, r1	; 42
  a6:	19 bc       	out	0x29, r1	; 41
  a8:	18 bc       	out	0x28, r1	; 40
  aa:	12 bc       	out	0x22, r1	; 34
  ac:	15 bc       	out	0x25, r1	; 37
  ae:	14 bc       	out	0x24, r1	; 36
  b0:	13 bc       	out	0x23, r1	; 35
  b2:	15 be       	out	0x35, r1	; 53
  b4:	14 be       	out	0x34, r1	; 52
  b6:	19 be       	out	0x39, r1	; 57
  b8:	1a b8       	out	0x0a, r1	; 10
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	88 b9       	out	0x08, r24	; 8
  be:	10 be       	out	0x30, r1	; 48
  c0:	16 b8       	out	0x06, r1	; 6
  c2:	80 e5       	ldi	r24, 0x50	; 80
  c4:	8d b9       	out	0x0d, r24	; 13
  c6:	1e b8       	out	0x0e, r1	; 14
		lcd_wr_char(thousand);
  c8:	16 be       	out	0x36, r1	; 54
  ca:	08 95       	ret

000000cc <lcd_set_4bit>:
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
  cc:	8f ec       	ldi	r24, 0xCF	; 207
  ce:	97 e0       	ldi	r25, 0x07	; 7
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_set_4bit+0x4>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_set_4bit+0xa>
  d6:	00 00       	nop
  d8:	90 98       	cbi	0x12, 0	; 18
  da:	80 e3       	ldi	r24, 0x30	; 48
  dc:	82 bb       	out	0x12, r24	; 18
  de:	91 9a       	sbi	0x12, 1	; 18
  e0:	ef e0       	ldi	r30, 0x0F	; 15
  e2:	f7 e2       	ldi	r31, 0x27	; 39
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_set_4bit+0x18>
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_set_4bit+0x1e>
  ea:	00 00       	nop
		hundred = temp%10 + 48;
  ec:	91 98       	cbi	0x12, 1	; 18
  ee:	ef ec       	ldi	r30, 0xCF	; 207
  f0:	f7 e0       	ldi	r31, 0x07	; 7
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_set_4bit+0x26>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_set_4bit+0x2c>
  f8:	00 00       	nop
  fa:	90 98       	cbi	0x12, 0	; 18
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	91 9a       	sbi	0x12, 1	; 18
 100:	ef e0       	ldi	r30, 0x0F	; 15
 102:	f7 e2       	ldi	r31, 0x27	; 39
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_set_4bit+0x38>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_set_4bit+0x3e>
 10a:	00 00       	nop
 10c:	91 98       	cbi	0x12, 1	; 18
 10e:	ef ec       	ldi	r30, 0xCF	; 207
 110:	f7 e0       	ldi	r31, 0x07	; 7
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_set_4bit+0x46>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_set_4bit+0x4c>
 118:	00 00       	nop
 11a:	90 98       	cbi	0x12, 0	; 18
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	91 9a       	sbi	0x12, 1	; 18
 120:	8f e0       	ldi	r24, 0x0F	; 15
 122:	97 e2       	ldi	r25, 0x27	; 39
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_set_4bit+0x58>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_set_4bit+0x5e>
		lcd_wr_char(hundred);
 12a:	00 00       	nop
 12c:	91 98       	cbi	0x12, 1	; 18
 12e:	ef ec       	ldi	r30, 0xCF	; 207
		flag=1;
	}
	if(digits==2 || flag==1)
 130:	f7 e0       	ldi	r31, 0x07	; 7
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_set_4bit+0x66>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_set_4bit+0x6c>
	{
		temp = value/10;
 138:	00 00       	nop
 13a:	90 98       	cbi	0x12, 0	; 18
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	82 bb       	out	0x12, r24	; 18
 140:	91 9a       	sbi	0x12, 1	; 18
 142:	8f e0       	ldi	r24, 0x0F	; 15
 144:	97 e2       	ldi	r25, 0x27	; 39
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_set_4bit+0x7a>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_set_4bit+0x80>
 14c:	00 00       	nop
 14e:	91 98       	cbi	0x12, 1	; 18
 150:	08 95       	ret

00000152 <lcd_wr_command>:
 152:	92 b3       	in	r25, 0x12	; 18
 154:	9f 70       	andi	r25, 0x0F	; 15
 156:	92 bb       	out	0x12, r25	; 18
		tens = temp%10 + 48;
 158:	92 b3       	in	r25, 0x12	; 18
 15a:	28 2f       	mov	r18, r24
 15c:	20 7f       	andi	r18, 0xF0	; 240
 15e:	92 2b       	or	r25, r18
 160:	92 bb       	out	0x12, r25	; 18
 162:	90 98       	cbi	0x12, 0	; 18
 164:	91 9a       	sbi	0x12, 1	; 18
 166:	ef e0       	ldi	r30, 0x0F	; 15
 168:	f7 e2       	ldi	r31, 0x27	; 39
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_wr_command+0x18>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_wr_command+0x1e>
 170:	00 00       	nop
 172:	91 98       	cbi	0x12, 1	; 18
 174:	92 b3       	in	r25, 0x12	; 18
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	92 bb       	out	0x12, r25	; 18
 17a:	92 b3       	in	r25, 0x12	; 18
 17c:	82 95       	swap	r24
 17e:	80 7f       	andi	r24, 0xF0	; 240
 180:	89 2b       	or	r24, r25
 182:	82 bb       	out	0x12, r24	; 18
 184:	90 98       	cbi	0x12, 0	; 18
 186:	91 9a       	sbi	0x12, 1	; 18
 188:	8f e0       	ldi	r24, 0x0F	; 15
 18a:	97 e2       	ldi	r25, 0x27	; 39
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_wr_command+0x3a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_wr_command+0x40>
		lcd_wr_char(tens);
 192:	00 00       	nop
 194:	91 98       	cbi	0x12, 1	; 18
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
 196:	08 95       	ret

00000198 <lcd_init>:
 198:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_set_4bit>
 19c:	8f ec       	ldi	r24, 0xCF	; 207
 19e:	97 e0       	ldi	r25, 0x07	; 7
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x8>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_init+0xe>
 1a6:	00 00       	nop
 1a8:	88 e2       	ldi	r24, 0x28	; 40
 1aa:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_wr_command>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_wr_command>
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_wr_command>
 1ba:	8e e0       	ldi	r24, 0x0E	; 14
 1bc:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_wr_command>
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_wr_command>
 1c6:	08 95       	ret

000001c8 <lcd_wr_char>:
 1c8:	92 b3       	in	r25, 0x12	; 18
 1ca:	9f 70       	andi	r25, 0x0F	; 15
 1cc:	92 bb       	out	0x12, r25	; 18
 1ce:	92 b3       	in	r25, 0x12	; 18
 1d0:	28 2f       	mov	r18, r24
 1d2:	20 7f       	andi	r18, 0xF0	; 240
		lcd_wr_char(unit);
 1d4:	92 2b       	or	r25, r18
 1d6:	92 bb       	out	0x12, r25	; 18
	}
	if(digits>5)
 1d8:	90 9a       	sbi	0x12, 0	; 18
 1da:	91 9a       	sbi	0x12, 1	; 18
	{
		lcd_wr_char('E');
 1dc:	ef e0       	ldi	r30, 0x0F	; 15
 1de:	f7 e2       	ldi	r31, 0x27	; 39
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_wr_char+0x18>
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_wr_char+0x1e>
 1e6:	00 00       	nop
 1e8:	91 98       	cbi	0x12, 1	; 18
 1ea:	92 b3       	in	r25, 0x12	; 18
 1ec:	9f 70       	andi	r25, 0x0F	; 15
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 1ee:	92 bb       	out	0x12, r25	; 18
 1f0:	92 b3       	in	r25, 0x12	; 18
 1f2:	82 95       	swap	r24
 1f4:	80 7f       	andi	r24, 0xF0	; 240
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
 1f6:	89 2b       	or	r24, r25
 1f8:	82 bb       	out	0x12, r24	; 18
 1fa:	90 9a       	sbi	0x12, 0	; 18
 1fc:	91 9a       	sbi	0x12, 1	; 18
 1fe:	8f e0       	ldi	r24, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	97 e2       	ldi	r25, 0x27	; 39
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_wr_char+0x3a>
 206:	00 c0       	rjmp	.+0      	; 0x208 <lcd_wr_char+0x40>
 208:	00 00       	nop
	lcd_port |= letter;
	sbit(lcd_port,RS);
	//cbit(lcd_port,RW);
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
 20a:	91 98       	cbi	0x12, 1	; 18
 20c:	08 95       	ret

0000020e <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	71 f0       	breq	.+28     	; 0x22e <lcd_cursor+0x20>
 212:	18 f4       	brcc	.+6      	; 0x21a <lcd_cursor+0xc>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	31 f0       	breq	.+12     	; 0x224 <lcd_cursor+0x16>
 218:	08 95       	ret
 21a:	83 30       	cpi	r24, 0x03	; 3
 21c:	69 f0       	breq	.+26     	; 0x238 <lcd_cursor+0x2a>
 21e:	84 30       	cpi	r24, 0x04	; 4
 220:	81 f0       	breq	.+32     	; 0x242 <lcd_cursor+0x34>
 222:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 224:	8f e7       	ldi	r24, 0x7F	; 127
 226:	86 0f       	add	r24, r22
 228:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_wr_command>
 22c:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 22e:	8f eb       	ldi	r24, 0xBF	; 191
 230:	86 0f       	add	r24, r22
 232:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_wr_command>
 236:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 238:	83 e9       	ldi	r24, 0x93	; 147
 23a:	86 0f       	add	r24, r22
 23c:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_wr_command>
 240:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 242:	83 ed       	ldi	r24, 0xD3	; 211
 244:	86 0f       	add	r24, r22
 246:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_wr_command>
 24a:	08 95       	ret

0000024c <spi_tranceiver>:


//Function to send and receive data
unsigned char spi_tranceiver (unsigned char data)
{
	SPDR = data;                       //Load data into the buffer
 24c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF) ));       //Wait until transmission complete
 24e:	77 9b       	sbis	0x0e, 7	; 14
 250:	fe cf       	rjmp	.-4      	; 0x24e <spi_tranceiver+0x2>
	return(SPDR);                      //Return received data
 252:	8f b1       	in	r24, 0x0f	; 15
}
 254:	08 95       	ret

00000256 <main>:

unsigned char spi_tranceiver(unsigned char );

int main(void)
{
	pins_init(); 
 256:	0e 94 3e 00 	call	0x7c	; 0x7c <pins_init>
	lcd_init();   
 25a:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_init>
	uint8_t recieved_data;
	uint8_t transmitted_data;
	uint8_t s;

char switches;
		 lcd_cursor(1,1);
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_cursor>


unsigned char spi_tranceiver(unsigned char );

int main(void)
{
 266:	11 e0       	ldi	r17, 0x01	; 1
 268:	c1 2f       	mov	r28, r17
    while (1) 
    { 
	for(int i=0;i<8;i++)
	{
	
	 switches=PINC;
 26a:	83 b3       	in	r24, 0x13	; 19
	 transmitted_data = switches ;
	

	 recieved_data = spi_tranceiver(transmitted_data);
 26c:	0e 94 26 01 	call	0x24c	; 0x24c <spi_tranceiver>
 270:	d8 2f       	mov	r29, r24
	 
	 lcd_cursor(1,1+i);
 272:	6c 2f       	mov	r22, r28
 274:	81 2f       	mov	r24, r17
 276:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_cursor>
	 lcd_wr_char( recieved_data);
 27a:	8d 2f       	mov	r24, r29
 27c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_wr_char>
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	89 e6       	ldi	r24, 0x69	; 105
 284:	98 e1       	ldi	r25, 0x18	; 24
 286:	21 50       	subi	r18, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x30>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x3a>
 290:	00 00       	nop
 292:	cf 5f       	subi	r28, 0xFF	; 255
		 lcd_cursor(1,1);
	
	
    while (1) 
    { 
	for(int i=0;i<8;i++)
 294:	c9 30       	cpi	r28, 0x09	; 9
 296:	49 f7       	brne	.-46     	; 0x26a <main+0x14>
 298:	e7 cf       	rjmp	.-50     	; 0x268 <main+0x12>

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
